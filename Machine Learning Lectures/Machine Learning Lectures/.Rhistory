library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(predictors)
IL
predictors$IL
predictors
head(predictors)
head(predictors[3,20:30])
head(predictors[3,40:5])
head(predictors[3,40:55])
head(predictors[3,57:70])
head(predictors[3,53:70])
head(predictors[3,50:70])
head(predictors[3,50:70])
head(predictors[3,53:70])
head(predictors[3,56:70])
head(predictors[3,57:69])
head(predictors[3,57:67])
head(predictors[,57:67])
head(predictors[,57:68])
head(predictors[,57:69])
head(predictors[,57:68])
head(predictors[,56:68])
head(predictors[,57:68])
IL <- predictors[,57:68]
training adData[inTrain,]
training
IL <- training[,57:68]
preProcess
?preProcess
ILtrain <- training[,57:68]
ILtest <- testing[,57:68]
preProc <- preProcess(log10(ILtrain))
preProc <- preProcess(log10(ILtrain), method="pca", pcaComp=2)
head(ILtrain)
preProc <- preProcess(log10(ILtrain), method="pca", pcaComp=2)
ILtest <- testing[,58:68]
ILtrain <- training[,58:68]
head(ILtrain)
head(train)
head(training)
ILtrain <- training[,58:69]
head(ILtrain)
ILtest <- testing[,58:69]
preProc <- preProcess(log10(ILtrain), method="pca", pcaComp=2)
preProc <- preProcess(log10(ILtrain + 1), method="pca", pcaComp=2)
preProc <- preProcess(log10(ILtrain +1), method="pca", pcaComp=2)
log10(ILtrain +1)
preProc <- preProcess(ILtrain, method="pca", pcaComp=2)
modelFit <- train(diagnosis ~ .,method="glm",preProcess="pca",data=ILfit)
# print results of model
confusionMatrix(diagnosis,predict(modelFit,testing)
)
modelFit <- train(diagnosis ~ .,method="glm",preProcess="pca",data=ILtrain)
# print results of model
confusionMatrix(diagnosis,predict(modelFit,testing)
preProc
preProc
preProc <- preProcess(ILtrain, method="pca", thresh=80)
preProc
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
trainPC <- predict(preProc,training)
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
trainPC <- predict(preProc,training)
prePrc
prePrcc
preProc
trainPC <- predict(preProc,training)
trainPC <- predict(preProc,ILtrain)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
modelFit <- train(training ~ .,method="glm",data=trainPC)
head(trainPC)
modelFit <- train(diagnosis ~ .,method="glm",data=trainPC)
modelFit <- train(training ~ .,method="glm",data=trainPC)
?train
modelFit <- train(training ~ .,method="glm",data=trainPC)
head(trainPC)
trainPC <- predict(preProc,training)
modelFit <- train(training ~ .,method="glm",data=trainPC)
modelFit <- train(diagnosis ~ .,method="glm",data=trainPC)
dim(diagnosis)
diagnosis
head(training)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing)
testPC <- predict(preProc,ilTest)
testPC <- predict(preProc,ILTest)
testPC <- predict(preProc,ILtest)
confusionMatrix(testing$type,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
swirl()
library(swirl)
swirl()
bye
bye()
library(tree)
install.packages("tree")
> library(ISLR)
> attach(Carseats )
> High=ifelse(Sales <=8,"No","Yes ")
library(ISLR)
attach(Carseats )
High=ifelse(Sales <=8,"No","Yes ")
library(ISLR)
attach(Carseats)
High=ifelse(Sales <=8,"No","Yes ")
library(ISLR)
attach(Carseats)
High=ifelse(Carseats$Sales <=8,"No","Yes")
Carseats
library(Carseats)
data(Carseats)
library(ISLR)
install.packages("ISLR")
library(ISLR)
attach(Carseats)
High=ifelse(Carseats$Sales <=8,"No","Yes")
Carseats =data.frame(Carseats, High)
tree.carseats =tree(High~,-Sales, Carseats)
tree.carseats <- tree(High~,-Sales, Carseats)
tree.carseats <- tree(High~.-Sales, Carseats)
library(tree)
tree.carseats <- tree(High~.-Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats )text(tree.carseats ,pretty =0)
plot(tree.carseats)
text(tree.carseats, pretty =0)
plot(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty =0)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
mixtures$SuperPlasticizer
head(mixtures)
hist(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
preProc
ILtrain <- training[,58:69]
trainPC <- predict(preProc,training)
testPC <- predict(preProc,ILtest)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProcNorm <- preProcess(ILtrain, method="glm", thresh=0.8)
preProcNorm <- preProcess(ILtrain, thresh=0.8)
testPC1 <- predict(preProcNorm,ILtest)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC1))
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
preProc
head(ILtrain)
head(training)
head(training$IL)
head(training$IL*)
training[ , grepl( "IL" , names( training ) ) ]
head(training[ , grepl( "IL" , names( training ) ) ])
preProc <- preProcess(ILtrain, method="pca", thresh=0.8)
prePrc
preProc
preProc <- preProcess(ILtrain, method="pca", thresh=0.9)
preProc
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain = createDataPartition(segmentationOriginal$Case, p = 0.6)[[1]]
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
?rpart
tr <- train(Case ~ ., method = "rpart", data = train.1)
tr$finalModel
plot(tr)
plot(tr$finalModel)
text(tr$finalModel, pretty =0)
text(tr$finalModel)
plot(tr$finalModel)
segpred<- data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
segpred
segpred <- cbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
segpred <- cbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, VarIntenCh4 = 100))
segpred <- cbind(segpred, data.frame(FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
segpred
segpred <- rbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2, VarIntenCh4 = NA)
segpred <- rbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = NA, FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2, VarIntenCh4 = NA)
segpred
segpred <- rbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = NA, FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2, VarIntenCh4 = NA)
segpred <- rbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = NA, FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred<- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2, VarIntenCh4 = NA)
segpred <- rbind(segpred, data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, PerimStatusCh1=NA, VarIntenCh4 = 100))
segpred <- rbind(segpred, data.frame(TotalIntench2 = NA, FiberWidthCh1 = 8, PerimStatusCh1=2, VarIntenCh4 = 100))
segpred
segpred <- rbind(segpred, data.frame(TotalIntench2 = NA, x0=0, FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred <- rbind(segpred, c(TotalIntench2 = NA, x0=0, FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2))
segpred
segpred[,-2]
segpred <- segpred[,-2]
segpred
a <- predict(tr,segpred)
head(segmentationOriginal)
head(segmentationOriginal)$Case
View(segmentationOriginal)
createDataPartition(y=segmentationOriginal$Case, times=1, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=segmentationOriginal$Case, times=1, p=0.75, list=FALSE)
set.seed(125)
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
segmentationOriginal$CART
tr <- train(Class ~ ., method = "rpart", data = train.1)
head(getTree(tr$finalModel)
)
tr$finalModel
plot(tr)
plot(tr$finalModel)
text(tr$finalModel)
tr$finalModel$prox
rattle::fancyRpartPlot(tr$finalModel)
install.packages("rattle")
library(rattle)
rattle::fancyRpartPlot(tr$finalModel)
install.packages("rattle")
rattle::fancyRpartPlot(tr$finalModel)
print(tr$finalModel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(tr$finalModel)
install.packages("rpart.plot")
library(rplot.plot)
library(rpart.plot)
fancyRpartPlot(tr$finalModel)
print(tr$finalModel)
tr
segpred
?predict
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
createDataPartition(y=segmentationOriginal$Case, times=1, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=segmentationOriginal$Case, times=1, p=0.7, list=FALSE)
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
tr <- train(Class ~ ., method = "rpart", data = train.1)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
createDataPartition(y=segmentationOriginal$Case, times=1, list=FALSE)
inTrain <- createDataPartition(y=segmentationOriginal$Case, times=1, p=0.7, list=FALSE)
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
tr <- train(Class ~ ., method = "rpart", data = train.1)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, times=1, list=FALSE)
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
tr <- train(Class ~ ., method = "rpart", data = train.1)
fancyRpartPlot(tr$finalModel)
rattle.print.rpart(tr$model)
drawTreeNodes(tr$model)
library(rattle)
rattle.print.rpart(tr$model)
drawTreeNodes(tr$model)
tr$model
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, times=1, list=FALSE)
train.1 = segmentationOriginal[inTrain,]
test.1 = segmentationOriginal[-inTrain,]
tr <- train(Class ~ ., method = "rpart", data = train.1)
drawTreeNodes(tr$finalModel)
rattle.print.rpart(tr$finalModel)
library(rpart)
rattle.print.rpart(tr$finalModel)
library(rattle)
rattle.print.rpart(tr$finalModel)
drawTreeNodes(tr$finalModel)
fancyRpartPlot(tr$finalModel)
head(train.1)
segmentationOriginal[segmentationOrginal==train]
segmentationOriginal[segmentationOrginal$Case==train]
head(segmentationOriginal[segmentationOriginal$Case==train])
head(segmentationOriginal$Case)
head(segmentationOriginal$Case=="Test")
head(segmentationOriginal[segmentationOriginal$Case=="Train"])
segmentationOriginal[segmentationOriginal$Case=="Train"]
segmentationOriginal
segmentationOriginal$Case
segmentationOriginal[segmentationOriginal$Case]
segmentationOriginal$Case=="Train"
segmentationOriginal[segmentationOriginal$Case=="Train"]
segmentationOriginal[segmentationOriginal$Case=="Train",]
head(segmentationOriginal[segmentationOriginal$Case=="Train",])
head(segmentationOriginal[segmentationOriginal$Case=="Test",])
tr <- train(Class ~ ., method = "rpart", data = train.1)
fancyRpartPlot(tr$finalModel)
tr
train.1 <- segmentationOriginal[segmentationOriginal$Case=="Train",]
test.1 <- segmentationOriginal[segmentationOriginal$Case=="Test",]
tr <- train(Class ~ ., method = "rpart", data = train.1)
fancyRpartPlot(tr$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel)
View(vowel)
View(vowel.train)
View(vowel.test)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
?pgmm
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
data(olive)
head(olive)
olive = olive[,-1]
inTrain <- createDataPartition(y=olive$Area, p=0.7, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit <- train(Area ~ .,method="rpart",data=training)
print(modFit$finalModel)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modFit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(SAheart)
logModel <- train(chd ~ alcohol + obesity + tobacco + typea +,method="glm",data=trainSA)
logModel <- train(chd ~ alcohol + obesity + tobacco + typea +,method="glm",data=trainSA)
logModel <- train(chd ~ alcohol + obesity + tobacco + typea + ldl,
method="glm",data=trainSA)
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm",data=trainSA)
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm", family="bionmial", data=trainSA)
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm", family="binomial", data=trainSA)
logModel
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm", family="binomial", data=trainSA)
glmModel <- glm(chd ~ age +alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
glmMOdel
glmModel
head(SAheart)
summary(SAheart$chd)
unique(SAheart$chd)
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm", family="binomial", data=trainSA)
?train
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainSA
predTrain <- predict(logMOdel)
predTrain <- predict(logModel)
predTrain
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
logModel <- train(chd ~ age +alcohol + obesity + tobacco + typea + ldl,
method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain <- predict(logModel)
missClass(trainSA, predTrain)
missClass(trainSA$chd, predTrain)
predTest <- predict(logModel)
missClass(testSA$chd, predTest)
predTest <- predict(logModel, newdata=testSA)
missClass(testSA$chd, predTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
sapply
voweltest <- head(vowel.train)
voweltest2 <- head(vowel.test)
voweltest
?sapply
sapply
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
rf<-train(outcome ~ ., data=vowel.train, method="rf", prox=TRUE, ntree=500)
rf<-train(y ~ ., data=vowel.train, method="rf", prox=TRUE, ntree=500)
rf<-train(y ~ ., data=vowel.train, method="rf", prox=TRUE, ntree=500)
varImp
?varImp
varImp(rf)
